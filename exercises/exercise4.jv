pipeline Temperature_Pipeline {
    TemperatureFileDownloader -> ZipArchiveInterpreter;

    ZipArchiveInterpreter
    -> TemperatureFilePicker
    -> TemperatureTextInterpreter
    -> TemperatureCSVInterpreter
    -> RenameA1toE1CellWriter
    -> RenameBatteryCellWriter
    -> TemperatureColumnDeleter
    -> TemperatureTableInterpreter
    -> CelsiusToFahrenheitTemperature
    -> CelsiusToFahrenheitBatteryTemperature
    -> TemperatureLoader;

    block TemperatureFileDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block TemperatureFilePicker oftype FilePicker { 
        path: "/data.csv";
    }
    
    block TemperatureTextInterpreter oftype TextFileInterpreter {}

    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block RenameA1toE1CellWriter oftype CellWriter {
        at: range A1:E1;
        write: ["id","producer","model","month","temperature"]; 
    }

    block RenameBatteryCellWriter oftype CellWriter {
        at: cell J1;
        write: ["battery_temperature"]; 
    }

    block TemperatureColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }
    
    block TemperatureTableInterpreter oftype TableInterpreter    {
        header: false;
        columns: [
            "id" oftype validId,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype ValidMonth,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    block CelsiusToFahrenheitTemperature oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitBatteryTemperature oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    transform CelsiusToFahrenheit {
        from tempCelsius oftype decimal;
        to tempFahrenheit oftype decimal;

        tempFahrenheit: (tempCelsius * 9/5) + 32; 
    }

    valuetype validId oftype integer {
        constraints: [validIdConstraint];
    } 

    constraint validIdConstraint on decimal: 
        value > 0; 

    valuetype ValidMonth oftype integer {
        constraints: [ValidMonthConstraint];
    }

    constraint ValidMonthConstraint oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: true;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    block TemperatureLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

}